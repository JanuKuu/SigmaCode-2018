void shortSideAuto(){
		boolean status = 0;
		switch (autoState)
		{
			case 0 :
				status = moveStraight(140, 0.65);
				if(status == 1)
				{
					autoState = 1;
				}
				break;

			case 1 :
				status = GyroTurn(rInvert * 70);
				if(status == 1)
				{
					autoState = 2;
				}
				break;

			case 2 :
				status = moveStraight(17, 0.65);
				sigmaLift.Set(frc::DoubleSolenoid::Value::kReverse);

				if(status == 1)
				{
					autoState = 3;
				}
				break;

			case 3 :
				intake1.Set(0.5);
				intake2.Set(-0.5);
				break;
		}
    }

	void centerAutoScore(){
		boolean status = 0;

		switch (autoState)
		{
			case 0 :
				sigmaIntake1.Set(frc::DoubleSolenoid::Value::kReverse);

				status = moveStraight(24, 0.65);
				if(status == 1)
				{
					autoState = 1;
				}
				break;

			case 1 :
				status = GyroTurn(cInvert * cAngle);
				if (status == 1)
				{
					autoState = 2;
				}
				break;

			case 2 :
				status = moveStraight(cDistance, 0.65);
				if (status == 1)
				{
					autoState = 3;
				}
				sigmaLift.Set(frc::DoubleSolenoid::Value::kReverse);
				break;

			case 3 :

				if (gamedata[0] == 'R')
				{
					sigmaDrive(0.0, 0.25);
				}
				else if (gamedata[0] == 'L')
				{
					sigmaDrive(-0.25, 0.0);
				}

				Wait(0.50);
				sigmaDrive(0.0, 0.0);
			

				
				intake1.Set(0.5);
				intake2.Set(-0.5);
				Wait(0.3);
				sigmaIntake1.Set(frc::DoubleSolenoid::Value::kForward);

				break;
		}
	}

	void baseLineAuto(){
		boolean status = 0;

		switch (autoState)
		{
			case 0 :
				status = moveStraight(120, 0.65);

				if(status == 1)
				{
					autoState = 1;
				}
				break;
		}
	}

	void AutonomousInit() override {
		System.out.println("Auto Start!");		

		m_autoSelected = m_chooser.GetSelected();
		gamedata = frc::DriverStation::GetInstance().GetGameSpecificMessage();

		if(m_autoSelected == leftAuto){rInvert = 1;}
		else if(m_autoSelected == rightAuto){rInvert = -1;}

		if(gamedata[0] == 'L'){cInvert = -1; cAngle = 35.0; cDistance = 90;}
		else if(gamedata[0] == 'R'){cInvert = 1; cAngle = 23.5; cDistance = 90;}

		autoState = 0;
	}

	void AutonomousPeriodic() {


		if(m_autoSelected == autoLine)
		{
			baseLineAuto();
		}
		else if(m_autoSelected == leftAuto)
		{
			if (gamedata[0] == 'L')
			{
				shortSideAuto();
			}
			else if (gamedata[0] == 'R')
			{
				baseLineAuto();
			}
		}
		else if(m_autoSelected == rightAuto)
		{
			if (gamedata[0] == 'R')
			{
				shortSideAuto();
			}
			else if (gamedata[0] == 'L')
			{
				baseLineAuto();
			}
		}
		else if(m_autoSelected == centerAuto)
		{
			centerAutoScore();
		}
	}
